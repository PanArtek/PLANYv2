---
import Card from '../ui/Card.astro';
import Button from '../ui/Button.astro';
import { PORTFOLIO_PROJECTS } from '../../utils/constants';
import type { Project } from '../../utils/types';

export interface Props {
  showAll?: boolean;
  limit?: number;
}

const { showAll = false, limit = 6 } = Astro.props;

// Get projects to display
const projects = showAll ? PORTFOLIO_PROJECTS : PORTFOLIO_PROJECTS.slice(0, limit);

// Get unique categories for filtering
const categories = ['all', ...new Set(PORTFOLIO_PROJECTS.map(p => p.category))];

const categoryLabels = {
  all: 'Wszystkie',
  medical: 'Medyczne',
  education: 'Edukacyjne', 
  retail: 'Handlowe',
  office: 'Biurowe',
  other: 'Inne'
};
---

<section class="portfolio py-20 bg-white" id="realizacje">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Section Header - PRD Geometric Style -->
    <div class="portfolio-header text-center mb-16">
      <h2 class="text-4xl lg:text-5xl font-bold mb-6" style="color: var(--primary-dark);">
        Wyzwania które <span style="color: var(--primary-light);">rozwiązaliśmy</span>
      </h2>
      <p class="text-xl max-w-3xl mx-auto leading-relaxed" style="color: var(--neutral-dark);">
        17 lat doświadczenia w rozwiązywaniu skomplikowanych wyzwań branżowych. 
        Każdy projekt to dowód na to, że własny zespół specjalistów eliminuje problemy koordynacji.
      </p>
    </div>

    <!-- Category Filters -->
    {showAll && (
      <div class="portfolio-filters" role="group" aria-label="Filtruj projekty według kategorii">
        <h3 class="sr-only">Filtry kategorii projektów</h3>
        <div class="flex flex-wrap justify-center gap-3 mb-12">
          {categories.map((category, index) => (
            <Button
              variant="outline"
              size="md"
              data-category={category}
              class="filter-btn transition-all duration-300 hover:transform hover:scale-105"
              role="button"
              aria-pressed={index === 0 ? 'true' : 'false'}
              aria-describedby={`filter-${category}-desc`}
            >
              {categoryLabels[category as keyof typeof categoryLabels]}
              <span id={`filter-${category}-desc`} class="sr-only">
                {category === 'all' ? 'Pokaż wszystkie projekty' : `Filtruj według kategorii: ${categoryLabels[category as keyof typeof categoryLabels]}`}
              </span>
            </Button>
          ))}
        </div>
      </div>
    )}

    <!-- PRD Portfolio Grid - Geometric Tiles -->
    <div 
      class="portfolio-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12" 
      id="portfolioGrid"
      role="grid"
      aria-label="Portfolio projektów"
    >
      {projects.map((project, index) => (
        <div 
          class="portfolio-item opacity-0 transform translate-y-8" 
          data-category={project.category}
          data-project-id={project.id}
          role="gridcell"
          aria-describedby={`project-${project.id}-desc`}
        >
          <div 
            class={`portfolio-card-geometric portfolio-clip-${project.category} group cursor-pointer h-full bg-white transition-all duration-300 hover:transform hover:translateY(-4px)`}
            style="box-shadow: var(--geometric-shadow);"
            role="button"
            tabindex="0"
            aria-label={`Szczegóły projektu: ${project.title}`}
          >
            <!-- PRD Geometric Project Image -->
            <div class="relative overflow-hidden mb-6 aspect-[4/3]" style="background: linear-gradient(135deg, var(--neutral-light) 0%, var(--primary-medium) 100%);">
              <div class="portfolio-image-placeholder w-full h-full flex items-center justify-center">
                <div class="text-center" style="color: var(--neutral-dark);">
                  <svg class="w-16 h-16 mx-auto mb-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                  </svg>
                  <p class="text-sm font-medium">{project.title}</p>
                </div>
              </div>
              
              <!-- PRD Geometric Overlay -->
              <div class="absolute inset-0 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100" style="background: rgba(111, 36, 81, 0.85);">
                <Button variant="secondary" size="sm" class="transform scale-90 group-hover:scale-100 transition-transform duration-300">
                  Zobacz szczegóły
                </Button>
              </div>
              
              <!-- PRD Geometric Category Indicator -->
              <div class="absolute top-4 right-4 w-12 h-12 flex items-center justify-center" style="background: var(--primary-light); clip-path: polygon(50% 0%, 0% 100%, 100% 100%);">
                <span class="text-white text-xs font-bold">{project.category.charAt(0).toUpperCase()}</span>
              </div>
            </div>

            <!-- PRD Project Info -->
            <div class="px-6 pb-6 space-y-4" id={`project-${project.id}-desc`}>
              <!-- Title & Year -->
              <div class="flex items-start justify-between gap-3">
                <h3 class="text-xl font-semibold transition-colors duration-300" style="color: var(--primary-dark);">
                  {project.title}
                </h3>
                <time class="text-sm text-nowrap" style="color: var(--neutral-dark); opacity: 0.7;" datetime={project.year.toString()}>
                  {project.year}
                </time>
              </div>

              <!-- Challenge/Solution Preview -->
              <div class="text-sm leading-relaxed" style="color: var(--neutral-dark);">
                <p class="mb-2">
                  <strong style="color: var(--primary-dark);">Wyzwanie:</strong> {project.description || 'Specjalistyczne wymagania branżowe'}
                </p>
                <p>
                  <strong style="color: var(--primary-dark);">Rozwiązanie:</strong> Własny zespół specjalistów
                </p>
              </div>

              <!-- Category Badge & Area -->
              <div class="flex items-center justify-between pt-3 border-t" style="border-color: var(--neutral-light);">
                <span class="inline-block px-3 py-1 text-xs font-medium" style={`background: var(--primary-light); color: var(--primary-dark); clip-path: polygon(8px 0, 100% 0, calc(100% - 8px) 100%, 0 100%);`}>
                  {categoryLabels[project.category as keyof typeof categoryLabels]}
                </span>
                <div class="text-xs font-medium" style="color: var(--neutral-dark);">
                  {project.area ? `${project.area}m²` : '100-5000m²'}
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- View More Button (only on homepage) -->
    {!showAll && (
      <div class="text-center">
        <Button 
          variant="primary" 
          size="lg"
          href="/realizacje"
          class="view-more-btn"
        >
          Zobacz wszystkie realizacje
        </Button>
      </div>
    )}
  </div>
</section>

<!-- Portfolio Modal -->
<div 
  id="portfolioModal" 
  class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center p-4"
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
  aria-describedby="modal-description"
>
  <div 
    class="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
    role="document"
  >
    <div id="modalContent" class="p-6">
      <!-- Modal content will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .portfolio-item {
    transition: all 0.3s ease;
  }

  .portfolio-card {
    transition: transform 0.3s ease, shadow 0.3s ease;
  }

  .portfolio-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* PRD Geometric Portfolio Clips */
  .portfolio-clip-medical {
    clip-path: polygon(0 0, calc(100% - 30px) 0, 100% 30px, 100% 100%, 30px 100%, 0 calc(100% - 30px));
  }

  .portfolio-clip-education {
    clip-path: polygon(20px 0, 100% 0, 100% calc(100% - 20px), calc(100% - 20px) 100%, 0 100%, 0 20px);
  }

  .portfolio-clip-office {
    clip-path: polygon(0 0, calc(100% - 25px) 0, 100% 25px, 100% 100%, 25px 100%, 0 calc(100% - 25px));
  }

  .portfolio-clip-retail {
    clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  }

  .portfolio-clip-other {
    clip-path: polygon(25px 0, 100% 0, 100% calc(100% - 25px), calc(100% - 25px) 100%, 0 100%, 0 25px);
  }

  .filter-btn.active {
    background-color: var(--primary-800);
    color: white;
    border-color: var(--primary-800);
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Screen reader only text */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Focus styles for better accessibility */
  .portfolio-card:focus,
  .filter-btn:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Reduced motion fallback */
  @media (prefers-reduced-motion: reduce) {
    .portfolio-item,
    .portfolio-card,
    .filter-btn {
      transition: none !important;
      transform: none !important;
    }
    
    .portfolio-item {
      opacity: 1 !important;
    }
  }
</style>

<script type="module">
  function initPortfolioAnimations() {
    if (!window.gsap || !window.ScrollTrigger) return;
    
    gsap.registerPlugin(ScrollTrigger);
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    if (prefersReducedMotion) {
      // Show all items immediately for users who prefer reduced motion
      gsap.set('.portfolio-item', { opacity: 1, y: 0 });
      return;
    }

    // Animate portfolio header
    gsap.fromTo('.portfolio-header', 
      { opacity: 0, y: 30 },
      {
        opacity: 1,
        y: 0,
        duration: 0.8,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.portfolio-header',
          start: 'top 80%'
        }
      }
    );

    // Animate filter buttons (if present)
    if (document.querySelector('.portfolio-filters')) {
      gsap.fromTo('.filter-btn',
        { opacity: 0, y: 20 },
        {
          opacity: 1,
          y: 0,
          duration: 0.6,
          ease: 'power2.out',
          stagger: 0.1,
          scrollTrigger: {
            trigger: '.portfolio-filters',
            start: 'top 80%'
          }
        }
      );
    }

    // Animate portfolio items with stagger
    gsap.fromTo('.portfolio-item',
      { opacity: 0, y: 30 },
      {
        opacity: 1,
        y: 0,
        duration: 0.8,
        ease: 'power2.out',
        stagger: 0.15,
        scrollTrigger: {
          trigger: '.portfolio-grid',
          start: 'top 70%'
        }
      }
    );

    // Animate view more button
    if (document.querySelector('.view-more-btn')) {
      gsap.fromTo('.view-more-btn',
        { opacity: 0, y: 20 },
        {
          opacity: 1,
          y: 0,
          duration: 0.6,
          ease: 'power2.out',
          scrollTrigger: {
            trigger: '.view-more-btn',
            start: 'top 80%'
          }
        }
      );
    }
  }

  function initPortfolioFiltering() {
    const filterButtons = document.querySelectorAll('[data-category]');
    const portfolioItems = document.querySelectorAll('.portfolio-item');

    if (!filterButtons.length) return;

    // Set initial active filter
    const allButton = document.querySelector('[data-category="all"]');
    if (allButton) {
      allButton.classList.add('active');
      allButton.setAttribute('aria-pressed', 'true');
    }

    filterButtons.forEach(button => {
      // Add keyboard support
      button.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          button.click();
        }
      });

      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        
        // Update active button and ARIA states
        filterButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.setAttribute('aria-pressed', 'false');
        });
        button.classList.add('active');
        button.setAttribute('aria-pressed', 'true');

        // Announce filter change to screen readers
        const categoryLabel = button.textContent?.trim();
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('aria-atomic', 'true');
        announcement.className = 'sr-only';
        announcement.textContent = `Filtr aktywny: ${categoryLabel}`;
        document.body.appendChild(announcement);
        setTimeout(() => document.body.removeChild(announcement), 1000);

        // Filter items
        let visibleCount = 0;
        portfolioItems.forEach(item => {
          const itemCategory = item.getAttribute('data-category');
          const shouldShow = category === 'all' || itemCategory === category;
          
          if (shouldShow) {
            visibleCount++;
            item.setAttribute('aria-hidden', 'false');
            gsap.to(item, {
              opacity: 1,
              scale: 1,
              duration: 0.4,
              ease: 'power2.out'
            });
          } else {
            item.setAttribute('aria-hidden', 'true');
            gsap.to(item, {
              opacity: 0.3,
              scale: 0.95,
              duration: 0.4,
              ease: 'power2.out'
            });
          }
        });

        // Announce results count
        setTimeout(() => {
          const resultsAnnouncement = document.createElement('div');
          resultsAnnouncement.setAttribute('aria-live', 'polite');
          resultsAnnouncement.className = 'sr-only';
          resultsAnnouncement.textContent = `Znaleziono ${visibleCount} projekt${visibleCount === 1 ? '' : visibleCount < 5 ? 'y' : 'ów'}`;
          document.body.appendChild(resultsAnnouncement);
          setTimeout(() => document.body.removeChild(resultsAnnouncement), 1000);
        }, 500);
      });
    });
  }

  function initPortfolioModal() {
    const portfolioCards = document.querySelectorAll('.portfolio-card');
    const modal = document.getElementById('portfolioModal');
    const modalContent = document.getElementById('modalContent');

    if (!modal || !modalContent) return;

    let lastFocusedElement;

    portfolioCards.forEach(card => {
      // Add keyboard support for cards
      card.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          card.click();
        }
      });

      card.addEventListener('click', () => {
        const projectId = card.closest('.portfolio-item')?.getAttribute('data-project-id');
        if (!projectId) return;

        // Store last focused element for restoration
        lastFocusedElement = document.activeElement;

        // Here you would fetch project details and populate modal
        // For now, showing a placeholder
        modalContent.innerHTML = `
          <div class="text-center">
            <h3 id="modal-title" class="text-2xl font-bold mb-4">Szczegóły projektu</h3>
            <p id="modal-description" class="text-neutral-600 mb-6">Funkcja szczegółów projektu będzie wkrótce dostępna.</p>
            <button id="closeModal" class="px-6 py-2 bg-primary-800 text-white rounded-lg hover:bg-primary-900 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2" aria-label="Zamknij modal">
              Zamknij
            </button>
          </div>
        `;

        modal.classList.remove('hidden');
        modal.classList.add('flex');

        // Focus management
        const closeButton = modal.querySelector('#closeModal');
        closeButton?.focus();

        // Close modal functionality
        const closeModal = () => {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
          
          // Restore focus
          if (lastFocusedElement) {
            lastFocusedElement.focus();
          }
        };

        // Trap focus within modal
        const trapFocus = (e) => {
          if (e.key === 'Tab') {
            const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];

            if (e.shiftKey && document.activeElement === firstElement) {
              e.preventDefault();
              lastElement.focus();
            } else if (!e.shiftKey && document.activeElement === lastElement) {
              e.preventDefault();
              firstElement.focus();
            }
          }

          if (e.key === 'Escape') {
            closeModal();
          }
        };

        modal.addEventListener('keydown', trapFocus);
        closeButton?.addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => {
          if (e.target === modal) closeModal();
        });
      });
    });
  }

  // Initialize when DOM is ready
  function init() {
    initPortfolioAnimations();
    initPortfolioFiltering();
    initPortfolioModal();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>